var documenterSearchIndex = {"docs":
[{"location":"selection/#Particle-Selection-Algorithms","page":"Particle Selection","title":"Particle Selection Algorithms","text":"","category":"section"},{"location":"selection/","page":"Particle Selection","title":"Particle Selection","text":"trivial_selection!\nrepopulate!\nuniform_selection!\noptimal_selection!\ntargeted_selection!","category":"page"},{"location":"selection/#WeightedEnsemble.trivial_selection!","page":"Particle Selection","title":"WeightedEnsemble.trivial_selection!","text":"trivial_selection!: Trivial selection, copying over particles\n\nArguments\n\nE - particle ensemble\n\n\n\n\n\n","category":"function"},{"location":"selection/#WeightedEnsemble.repopulate!","page":"Particle Selection","title":"WeightedEnsemble.repopulate!","text":"repopulate!: After allocating the number of offspring of each particle, copy the particles over.\n\nArguments\n\nE - particle ensemble\nB - bin data structure\n\nOptional Arguments\n\n\n\n\n\n","category":"function"},{"location":"selection/#WeightedEnsemble.uniform_selection!","page":"Particle Selection","title":"WeightedEnsemble.uniform_selection!","text":"uniform_selection!: Uniformly select particles, ensuring each bin with positive bin weight has at least one offspring.\n\nArguments\n\nE - particle ensemble\nB - bin data structure\nt - t-th seletion step\n\nOptional Arguments\n\nallocation_resampler=systematic - resampling scheme amongst bins\nwithin_bin_resampler=multinomial - resampling scheme within bins\n\n\n\n\n\n","category":"function"},{"location":"selection/#WeightedEnsemble.optimal_selection!","page":"Particle Selection","title":"WeightedEnsemble.optimal_selection!","text":"optimal_selection!: Perform optimal selection of the particles, ensuring each non empty bin has at least one particle.\n\nArguments\n\nE - particle ensemble\nB - bin data structure\nv² - v² variance function estimator\nt - t-th seletion step\n\nOptional Arguments\n\nallocation_resampler=systematic - resampling scheme amongst bins\nwithin_bin_resampler=multinomial - resampling scheme within bins\n\n\n\n\n\n","category":"function"},{"location":"selection/#WeightedEnsemble.targeted_selection!","page":"Particle Selection","title":"WeightedEnsemble.targeted_selection!","text":"targeted_selection!: Perform targeted selection of the particles, ensuring each non empty bin has at least one particle.\n\nArguments\n\nE - particle ensemble\nB - bin data structure\nG - target function\nt - t-th seletion step\n\nOptional Arguments\n\nallocation_resampler=systematic - resampling scheme amongst bins\nwithin_bin_resampler=multinomial - resampling scheme within bins\n\n\n\n\n\n","category":"function"},{"location":"structures/#Data-Structures-for-Weighted-Ensemble","page":"Structures","title":"Data Structures for Weighted Ensemble","text":"","category":"section"},{"location":"structures/","page":"Structures","title":"Structures","text":"Ensemble\nBins","category":"page"},{"location":"structures/#WeightedEnsemble.Ensemble","page":"Structures","title":"WeightedEnsemble.Ensemble","text":"Ensemble{TP, TF<:AbstractFloat, TI<:Integer, TD}: A particle ensemble structure designed for WE with bins.\n\nFields\n\nξ̂ - particle positions after selection, before mutation\nξ - particle positions after mutation\nω̂ - partice weights after selection, before mutation\nω - partice weights after mutation\nb̂ - particle bin after selection, before mutation\nb - particle bin after mutation\no - number of offspring of the particle\nd̂ - auxiliary data for each particle after selection, before mutation\nd - auxiliary data for each particle, after mutation\n\n\n\n\n\n","category":"type"},{"location":"structures/#WeightedEnsemble.Bins","page":"Structures","title":"WeightedEnsemble.Bins","text":"Bins{TS, TW, TBI, TT}: A bin structure designed for WE\n\nFields\n\nΩ - structure containing information for uniquely identifying each bin\nn - number of particles in each bin\ntarget - target number of particles in each bin\nν - weight of each bin\nd - auxiliary bin data\n\n\n\n\n\n","category":"type"},{"location":"weighted_ensemble_algs/#Weighted-Ensemble-Methods","page":"Weighted Ensemble Methods","title":"Weighted Ensemble Methods","text":"","category":"section"},{"location":"weighted_ensemble_algs/#Serial-Algorithms","page":"Weighted Ensemble Methods","title":"Serial Algorithms","text":"","category":"section"},{"location":"weighted_ensemble_algs/","page":"Weighted Ensemble Methods","title":"Weighted Ensemble Methods","text":"run_we\nrun_we_observables\nrun_we!","category":"page"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.run_we","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.run_we","text":"run_we: Run a serial WE simulation, optionally returning the ensemble at each, step with\n\nArguments\n\nE₀ - initial particle ensemble\nB₀ - initial bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\n\nOptional Arguments\n\nn_save_iters = 1 - save the ensemble and bins every n_save_iters iterations.  Set n_save_iters=n_we_steps to only save the final values.\n\n\n\n\n\n","category":"function"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.run_we_observables","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.run_we_observables","text":"run_we_observables: Run a serial WE simulation, returning the values a specified fucntion, f, along the trajecotry.\n\nArguments\n\nE₀ - initial particle ensemble\nB₀ - initial bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\nobservables - Tuple of scalar observable functions for the ergodic average\n\n\n\n\n\n","category":"function"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.run_we!","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.run_we!","text":"run_we!: Run an in place serial WE simulation with\n\nArguments\n\nE - particle ensemble\nB - bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\n\n\n\n\n\n","category":"function"},{"location":"weighted_ensemble_algs/#Parallel-Algorithms","page":"Weighted Ensemble Methods","title":"Parallel Algorithms","text":"","category":"section"},{"location":"weighted_ensemble_algs/","page":"Weighted Ensemble Methods","title":"Weighted Ensemble Methods","text":"prun_we\nprun_we_observables\nprun_we!","category":"page"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.prun_we","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.prun_we","text":"prun_we: Run a parallel WE simulation, optionally returning the ensemble at each step. This performs the mutation steps in parallel, and assumes a worker pool has already been created.\n\nArguments\n\nE₀ - initial particle ensemble\nB₀ - initial bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\n\nOptional Arguments\n\nn_save_iters = 1 - save the ensemble and bins every n_save_iters iterations.  Set n_save_iters=n_we_steps to only save the final values.\n\n\n\n\n\n","category":"function"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.prun_we_observables","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.prun_we_observables","text":"prun_we_observables: Run a parallel WE simulation, optionally returning the ensemble at each step. This performs the mutation steps in parallel, and assumes a worker pool has already been created.\n\nArguments\n\nE₀ - initial particle ensemble\nB₀ - initial bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\nobservables - Tuple of scalar observable functions for the ergodic average\n\n\n\n\n\n","category":"function"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.prun_we!","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.prun_we!","text":"prun_we!: Run an in place parallel WE simulation.  This performs the mutation steps in parallel, and assumes a worker pool has already been created.\n\nArguments\n\nE - particle ensemble\nB - bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\n\n\n\n\n\n","category":"function"},{"location":"weighted_ensemble_algs/#Multithreaded-Algorithms","page":"Weighted Ensemble Methods","title":"Multithreaded Algorithms","text":"","category":"section"},{"location":"weighted_ensemble_algs/","page":"Weighted Ensemble Methods","title":"Weighted Ensemble Methods","text":"trun_we\ntrun_we_observables\ntrun_we!","category":"page"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.trun_we","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.trun_we","text":"trun_we: Run a multithreaded WE simulation, optionally returning the ensemble at each, step with\n\nArguments\n\nE₀ - initial particle ensemble\nB₀ - initial bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\n\nOptional Arguments\n\nn_save_iters = 1 - save the ensemble and bins every n_save_iters iterations.  Set n_save_iters=n_we_steps to only save the final values.\n\n\n\n\n\n","category":"function"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.trun_we_observables","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.trun_we_observables","text":"trun_we_observables: Run a multithreaded WE simulation, returning the values a specified fucntions, observables, along the trajecotry.\n\nArguments\n\nE₀ - initial particle ensemble\nB₀ - initial bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\nobservables - Tuple of scalar observable functions for the ergodic average\n\n\n\n\n\n","category":"function"},{"location":"weighted_ensemble_algs/#WeightedEnsemble.trun_we!","page":"Weighted Ensemble Methods","title":"WeightedEnsemble.trun_we!","text":"trun_we!: Run an in place multithreaded WE simulation with\n\nArguments\n\nE - particle ensemble\nB - bin data structure\nsampler - WE sampler functions data structure\nn_we_steps - number of steps in the WE run\n\n\n\n\n\n","category":"function"},{"location":"utilities/#Utility-Functions","page":"Utility Functions","title":"Utility Functions","text":"","category":"section"},{"location":"utilities/","page":"Utility Functions","title":"Utility Functions","text":"WeightedEnsemble.update_bin_weights!\nWeightedEnsemble.Points_to_Bins\nWeightedEnsemble.Voronoi_to_Bins\nWeightedEnsemble.Voronoi_bin_id\nWeightedEnsemble.setup_Voronoi_bins\nWeightedEnsemble.Dirac_to_Ensemble\nWeightedEnsenble.trivial_analysis!","category":"page"},{"location":"utilities/#WeightedEnsemble.update_bin_weights!","page":"Utility Functions","title":"WeightedEnsemble.update_bin_weights!","text":"update_bin_weights!: Update the bin weights from the ensemble\n\nArguments\n\nB - bin data structure\nE - particle ensemble\n\n\n\n\n\n","category":"function"},{"location":"utilities/#WeightedEnsemble.Points_to_Bins","page":"Utility Functions","title":"WeightedEnsemble.Points_to_Bins","text":"Points_to_Bins: Convenience function for constructing a bin structure using a sequence of points\n\nArguments\n\npoints - An array of points defining the Voronoi cells\n\n\n\n\n\n","category":"function"},{"location":"utilities/#WeightedEnsemble.Voronoi_to_Bins","page":"Utility Functions","title":"WeightedEnsemble.Voronoi_to_Bins","text":"Voronoi_to_Bins: Convenience function for constructing a bin structure using a sequence of points as the Voronoi sites\n\nArguments\n\nsites - An array of points defining the Voronoi cells\n\n\n\n\n\n","category":"function"},{"location":"utilities/#WeightedEnsemble.Voronoi_bin_id","page":"Utility Functions","title":"WeightedEnsemble.Voronoi_bin_id","text":"Voronoi_bin_id: Convenience function for bin id in Voronoi based bins\n\nArguments\n\nX - Point thats bin is to be determined tree - A nearest neighbors tree structure constructed with KDTree\n\n\n\n\n\n","category":"function"},{"location":"utilities/#WeightedEnsemble.setup_Voronoi_bins","page":"Utility Functions","title":"WeightedEnsemble.setup_Voronoi_bins","text":"setup_Voronoi_bins - Convenience function for constructing bins, a bin id function, and a rebinning function based on a set of Voronoi points\n\nArguments\n\nvoronoi_pts - User specified Voronoi cell centers\n\n\n\n\n\n","category":"function"},{"location":"utilities/#WeightedEnsemble.Dirac_to_Ensemble","page":"Utility Functions","title":"WeightedEnsemble.Dirac_to_Ensemble","text":"Dirac_to_Ensemble: Convenience function for construction an ensemble from a single initial walker.  This hard codes the weights to be Float64.\n\nArguments\n\nX - Starting state of all walkers n_particles - Number of walkers in the ensemble\n\n\n\n\n\n","category":"function"},{"location":"allocation/#Bin-Allocation-Algorithms","page":"Bin Allocation","title":"Bin Allocation Algorithms","text":"","category":"section"},{"location":"allocation/","page":"Bin Allocation","title":"Bin Allocation","text":"trivial_allocation!\nminimal_bin_allocation!\ntargeted_bin_allocation!\noptimal_bin_allocation!\nuniform_bin_allocation!\nwithin_bin_allocation!","category":"page"},{"location":"allocation/#WeightedEnsemble.trivial_allocation!","page":"Bin Allocation","title":"WeightedEnsemble.trivial_allocation!","text":"trivial_allocation!: Trivially allocate each particle to have one offspring.\n\nArguments\n\nE - particle ensemble\nB - bin data structure\n\n\n\n\n\n","category":"function"},{"location":"allocation/#WeightedEnsemble.minimal_bin_allocation!","page":"Bin Allocation","title":"WeightedEnsemble.minimal_bin_allocation!","text":"minimal_bin_allocation!: Allocates a single particle to be spawned within each nonempty bin\n\nArguments\n\nB - bin data structure\n\n\n\n\n\n","category":"function"},{"location":"allocation/#WeightedEnsemble.targeted_bin_allocation!","page":"Bin Allocation","title":"WeightedEnsemble.targeted_bin_allocation!","text":"targeted_bin_allocation!: Targeted allocation of particles amongst bins using a specified function, G:(p, E, B, t) → [0,∞) for bin p. Falls back to uniform allocation amongst the non-empty bins in the event that this G fails to normalize.\n\nArguments\n\nB - bin data structure\nE - particle ensemble\nG - target function\nt - t-th seletion step\nn_allocate - number of particles to allocate\nOptional Arguments\nallocation_resampler=systematic - resampling scheme amongst bins\n\n\n\n\n\n","category":"function"},{"location":"allocation/#WeightedEnsemble.optimal_bin_allocation!","page":"Bin Allocation","title":"WeightedEnsemble.optimal_bin_allocation!","text":"optimal_bin_allocation!: Optimally particles according to the bins, using a value function to approximate mutation variance.\n\nArguments\n\nB - bin data structure\nE - particle ensemble\nv² - v² variance function estimator\nt - t-th seletion step\nn_allocate - number of particles to allocate \n\nOptional Arguments\n\nallocation_resampler=systematic - resampling scheme amongst bins\n\n\n\n\n\n","category":"function"},{"location":"allocation/#WeightedEnsemble.uniform_bin_allocation!","page":"Bin Allocation","title":"WeightedEnsemble.uniform_bin_allocation!","text":"uniform_bin_allocation!: Uniformly allocate particles amongst bins.\n\nArguments\n\nB - bin data structure\nE - particle ensemble\nn_allocate - number of particles to allocate\n\nOptional Arguments\n\nallocation_resampler=systematic - resampling scheme amongst bins\n\n\n\n\n\n","category":"function"},{"location":"allocation/#WeightedEnsemble.within_bin_allocation!","page":"Bin Allocation","title":"WeightedEnsemble.within_bin_allocation!","text":"within_bin_allocation!: Once the number of offspring within each bin are set, allocate them amongst the particles within the bin.  This assumes that the bin allocations of the bins have completed.\n\nArguments\n\nE - particle ensemble\nB - bin data structure\n\nOptional Arguments\n\nwithin_bin_resampler=multinomial - resampling scheme within bins\n\n\n\n\n\n","category":"function"},{"location":"coarse_models/#Coarse-Models","page":"Coarse Modeling","title":"Coarse Models","text":"","category":"section"},{"location":"coarse_models/#Serial-Algorithms","page":"Coarse Modeling","title":"Serial Algorithms","text":"","category":"section"},{"location":"coarse_models/","page":"Coarse Modeling","title":"Coarse Modeling","text":"WeightedEnsemble.build_coarse_transition_matrix\nWeightedEnsemble.build_coarse_vectors\nWeightedEnsemble.build_coarse_poisson","category":"page"},{"location":"coarse_models/#WeightedEnsemble.build_coarse_transition_matrix","page":"Coarse Modeling","title":"WeightedEnsemble.build_coarse_transition_matrix","text":"build_coarse_transition_matrix: Contruct a transition matrix amongst the bins (serial version).\n\nArguments\n\nmutation! - an in place mutation function\nbin_id - bin identification function\nx0_vals - an array of starting values\nbin0_vals - an array of the bins corresponding to x0_vals\nn_bins - total number of bins\nn_trials - number of independent trials for each x0 starting value\n\n\n\n\n\n","category":"function"},{"location":"coarse_models/#WeightedEnsemble.build_coarse_vectors","page":"Coarse Modeling","title":"WeightedEnsemble.build_coarse_vectors","text":"build_coarse_vectors: Assemble the conditional expectation and 1- step variance approximations on a coarser model, given the transition matrix, K̃, and a coarse scale QoI function, f̃.\n\nArguments\n\nn_we_steps - number of WE steps\nK̃ - coarse scale transition matrix\nf̃ - quantity of interest vector on the bin space\n\n\n\n\n\n","category":"function"},{"location":"coarse_models/#WeightedEnsemble.build_coarse_poisson","page":"Coarse Modeling","title":"WeightedEnsemble.build_coarse_poisson","text":"build_coarse_poisson: Construct the solution to the Poisson problem and the 1-step variance approximation on the coarser model given the transition matrix, K̃, and a coarse scale QoI function, f̃.  This solves it using Julia's linear solver.\n\nArguments\n\nK̃ - coarse scale transition matrix\nf̃ - quantity of interest vector on the bin space\n\n\n\n\n\n","category":"function"},{"location":"coarse_models/#Parallel-Algorithms","page":"Coarse Modeling","title":"Parallel Algorithms","text":"","category":"section"},{"location":"coarse_models/","page":"Coarse Modeling","title":"Coarse Modeling","text":"WeightedEnsemble.pbuild_coarse_transition_matrix","category":"page"},{"location":"coarse_models/#WeightedEnsemble.pbuild_coarse_transition_matrix","page":"Coarse Modeling","title":"WeightedEnsemble.pbuild_coarse_transition_matrix","text":"pbuild_coarse_transition_matrix: Contruct a transition matrix amongst the bins in parallel.  It assumed that a pool of workers has already been contructed.  Returns a sparse matrix.\n\nArguments\n\nmutation! - an in place mutation function\nbin_id - bin identification function\nx0_vals - an array of starting values\nbin0_vals - an array of the bins corresponding to x0_vals\nn_bins - total number of bins\nn_trials - number of independent trials for each x0 starting value\n\n\n\n\n\n","category":"function"},{"location":"coarse_models/#Multithreaded-Algorithms","page":"Coarse Modeling","title":"Multithreaded Algorithms","text":"","category":"section"},{"location":"coarse_models/","page":"Coarse Modeling","title":"Coarse Modeling","text":"WeightedEnsemble.tbuild_coarse_transition_matrix","category":"page"},{"location":"coarse_models/#WeightedEnsemble.tbuild_coarse_transition_matrix","page":"Coarse Modeling","title":"WeightedEnsemble.tbuild_coarse_transition_matrix","text":"tbuild_coarse_transition_matrix: Contruct a transition matrix amongst the bins (multithreaded version).\n\nArguments\n\nmutation! - an in place mutation function\nbin_id - bin identification function\nx0_vals - an array of starting values\nbin0_vals - an array of the bins corresponding to x0_vals\nn_bins - total number of bins\nn_trials - number of independent trials for each x0 starting value\n\n\n\n\n\n","category":"function"},{"location":"#WeightedEnsemble.jl","page":"Home","title":"WeightedEnsemble.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia package implementation of the Weighted Ensemble MCMC algorithm","category":"page"},{"location":"resampling/#Resampling-Algorithms","page":"Resampling","title":"Resampling Algorithms","text":"","category":"section"},{"location":"resampling/","page":"Resampling","title":"Resampling","text":"WeightedEnsemble.Residual\nWeightedEnsemble.stratified\nWeightedEnsemble.systematic\nWeightedEnsemble.multinomial","category":"page"},{"location":"resampling/#WeightedEnsemble.Residual","page":"Resampling","title":"WeightedEnsemble.Residual","text":"Residual: perform residual sampling\n\nArguments\n\nn - number of trials ω - probabilities\n\n\n\n\n\n","category":"function"},{"location":"resampling/#WeightedEnsemble.stratified","page":"Resampling","title":"WeightedEnsemble.stratified","text":"stratified: perform stratified sampling\n\nArguments\n\nn - number of trials ω - probabilities\n\n\n\n\n\n","category":"function"},{"location":"resampling/#WeightedEnsemble.systematic","page":"Resampling","title":"WeightedEnsemble.systematic","text":"systematic: perform systematic sampling\n\nArguments\n\nn - number of trials ω - probabilities\n\n\n\n\n\n","category":"function"},{"location":"resampling/#WeightedEnsemble.multinomial","page":"Resampling","title":"WeightedEnsemble.multinomial","text":"multinomial: perform multinomial sampling\n\nArguments\n\nn - number of trials ω - probabilities\n\n\n\n\n\n","category":"function"}]
}
